{"version":3,"sources":["webpack:///./src/pages/notes/daily-notes/index.js"],"names":["allNotes","require","column","columnArray","currentMonth","Date","getMonth","DailyNotes","props","handleDailyNotesResize","window","innerWidth","setColumnArray","state","innerWidthKey","index","push","forEach","item","key","this","setState","componentWillMount","addEventListener","componentWillUnmount","removeEventListener","render","className","to","map","style","width","margin","marginHorizontal","pathArray","path","split","itemMonth","Number","length","boderHeight","Math","random","open","subordinate","height","title","slice","label","React","Component"],"mappings":"6LAGA,IAAMA,EAAWC,EAAQ,QAErBC,EAAS,EACTC,EAAc,GACdC,GAAe,IAAIC,MAAOC,WAAa,EAErCC,E,oBACJ,WAAYC,GAAQ,IAAD,SACjB,cAAMA,IAAN,MA6CFC,uBAAyB,WACD,oBAAXC,SAEPR,EADEQ,OAAOC,YAAc,IACd,EAEF,IAAMD,OAAOC,YAAcD,OAAOC,YAAc,IAC9C,EAEF,IAAMD,OAAOC,YAAcD,OAAOC,YAAc,IAC9C,EAEF,IAAMD,OAAOC,YAAcD,OAAOC,YAAc,IAC9C,EAEF,IAAMD,OAAOC,YAAcD,OAAOC,YAAc,IAC9C,EAEF,IAAMD,OAAOC,YAAcD,OAAOC,YAAc,IAC9C,EACAD,OAAOC,WAAa,IACpB,EACAD,OAAOC,WAAa,KACpB,GAEA,GAGb,EAAKC,kBAvEL,EAAKC,MAAQ,CACXC,cAAe,GAHA,E,kHAOnBF,eAAA,WACET,EAAc,GACd,IAAK,IAAIY,EAAQ,EAAGA,EAAQb,EAAQa,IAAS,CAE3CZ,EAAYa,KADJ,IAQVhB,EAASiB,SAAQ,SAACC,EAAMC,GACtB,IAAIJ,GAASI,EAAM,GAAKjB,EAOxBC,EAHAY,GAHAA,EAAQI,EAAM,EAAIjB,GACdiB,EAAM,GAAKjB,EACbiB,EAAM,KACWjB,GAAoB,IAAVa,EAC3Bb,EAAS,EACTa,EAAQ,GACSC,KAAKE,MAE1BE,KAAKC,SAAS,CACZP,cAAeM,KAAKN,cAAgB,K,EAIxCQ,mBAAA,WACEF,KAAKX,yBACiB,oBAAXC,QACTA,OAAOa,iBAAiB,SAAUH,KAAKX,yB,EAI3Ce,qBAAA,WACwB,oBAAXd,QACTA,OAAOe,oBAAoB,SAAUL,KAAKX,yB,EAkC9CiB,OAAA,WACE,OACE,yBAAKC,UAAU,eACb,kBAAC,OAAD,CACEC,GAAE,SACFD,UAAS,WAFX,YAOA,yBACEA,UAAU,YADZ,0BAKA,yBACEA,UAAU,aACVR,IAAKC,KAAKN,eAEV,yBACEa,UAAU,eAIRxB,EAAY0B,KAAI,SAACX,EAAMC,GAGrB,OACE,yBACEA,IAAKA,EACLQ,UAAU,SACVG,MAAO,CACLC,MAAM,eAAgB7B,EAAjB,IACL8B,OAAWC,mBAIXf,EAAKW,KAAI,SAACX,EAAMC,GACd,IAAIe,EAAYhB,EAAKiB,KAAKC,MAAM,KAC5BC,EAAYC,OAAOJ,EAAUA,EAAUK,OAAS,IAGhDC,EAAiC,GAAhBC,KAAKC,SAAgB,GAA3B,MACf,OACExB,EAAKyB,KACH,kBAAC,OAAD,CACExB,IAAKA,EACLS,GAAIV,EAAKiB,KACTR,UAAS,aAAeT,EAAK0B,YAApB,UAAwCP,IAAcjC,EAAe,YAAc,IAC5F0B,MAAO,CACLC,MATM,OAUNc,OAAQL,EACRR,OAZO,aAeT,yBACEL,UAAU,OACVmB,MAAU5B,EAAK0B,YAAV,MAEJ,GAAG1B,EAAK0B,aAAcG,MAAM,IAE/B,yBACEpB,UAAU,SACVT,EAAK8B,OACP,yBACErB,UAAU,QACVmB,MAAO5B,EAAK4B,OAEX5B,EAAK4B,QAGV,yBACE3B,IAAKA,EACLS,GAAIV,EAAKiB,KACTR,UAAS,aAAeT,EAAK0B,YAApB,YACTd,MAAO,CACLC,MAnCM,OAoCNc,OAAQL,EACRR,OAtCO,aAyCT,yBACEL,UAAU,SAET,GAAGT,EAAK0B,aAAcG,MAAM,IAE/B,yBACEpB,UAAU,SACVT,EAAK8B,OACP,yBACErB,UAAU,QACVmB,MAAO5B,EAAK4B,OAEX5B,EAAK4B,mB,GA1KbG,IAAMC,WA2LhB3C,a","file":"component---src-pages-notes-daily-notes-index-js-2e7c2ad41d29ca9e30e4.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport \"./style.scss\";\nconst allNotes = require(\"./notes.json\");\n\nlet column = 7;\nlet columnArray = [];\nlet currentMonth = new Date().getMonth() + 1;\n\nclass DailyNotes extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      innerWidthKey: 0\n    };\n  }\n\n  setColumnArray() {\n    columnArray = [];\n    for (let index = 0; index < column; index++) {\n      let c = [];\n      columnArray.push(c)\n    }\n\n    // const sort = allNotes.sort(function () {\n    //   return .5 - Math.random();\n    // })\n\n    allNotes.forEach((item, key) => {\n      let index = (key + 1) / column;\n      index = key + 1 > column ?\n        ((key + 1) % column) :\n        key + 1;\n      index = (index === column || index === 0) ?\n        column - 1 :\n        index - 1;\n      columnArray[index].push(item);\n    });\n    this.setState({\n      innerWidthKey: this.innerWidthKey + 1\n    })\n  }\n\n  componentWillMount() {\n    this.handleDailyNotesResize();\n    if (typeof window !== 'undefined') {\n      window.addEventListener('resize', this.handleDailyNotesResize)\n    }\n  }\n\n  componentWillUnmount() {\n    if (typeof window !== 'undefined') {\n      window.removeEventListener('resize', this.handleDailyNotesResize)\n    }\n  }\n\n  handleDailyNotesResize = () => {\n    if (typeof window !== 'undefined') {\n      if (window.innerWidth <= 200) {\n        column = 1;\n      }\n      else if (200 < window.innerWidth && window.innerWidth <= 350) {\n        column = 2;\n      }\n      else if (350 < window.innerWidth && window.innerWidth <= 500) {\n        column = 3;\n      }\n      else if (500 < window.innerWidth && window.innerWidth <= 650) {\n        column = 4;\n      }\n      else if (650 < window.innerWidth && window.innerWidth <= 800) {\n        column = 5;\n      }\n      else if (800 < window.innerWidth && window.innerWidth <= 900) {\n        column = 6;\n      } else if (window.innerWidth > 2000) {\n        column = 8;\n      } else if (window.innerWidth > 2600) {\n        column = 10;\n      } else {\n        column = 7;\n      }\n    }\n    this.setColumnArray();\n  }\n\n  render() {\n    return (\n      <div className=\"daily-notes\">\n        <Link\n          to={`/notes`}\n          className={`go-back`}\n        >\n          Go notes\n        </Link>\n\n        <div\n          className=\"aphorism\"\n        >\n          人生如蜡烛一样，从顶燃到底，一直都是光明的。\n          </div>\n        <div\n          className=\"notes-wrap\"\n          key={this.innerWidthKey}\n        >\n          <div\n            className=\"scroll-wrap\"\n          >\n\n            {\n              columnArray.map((item, key) => {\n                let marginHorizontal = `0.1rem`;\n                let marginPortrait = `0.25rem`;\n                return (\n                  <div\n                    key={key}\n                    className=\"column\"\n                    style={{\n                      width: `calc(100% / ${column})`,\n                      margin: `${marginHorizontal} ${marginPortrait}`\n                    }}\n                  >\n                    {\n                      item.map((item, key) => {\n                        let pathArray = item.path.split(\"/\");\n                        let itemMonth = Number(pathArray[pathArray.length - 1]);\n                        let notesMargin = `0.2rem 0`;\n                        let boderWidth = `100%`;\n                        let boderHeight = `${Math.random() * 20 + 20}rem`;\n                        return (\n                          item.open ?\n                            <Link\n                              key={key}\n                              to={item.path}\n                              className={`notes nts-${item.subordinate} open ${itemMonth === currentMonth ? \"animation\" : \"\"}`}\n                              style={{\n                                width: boderWidth,\n                                height: boderHeight,\n                                margin: `${notesMargin}`,\n                              }}\n                            >\n                              <div\n                                className=\"year\"\n                                title={`${item.subordinate}年`}\n                              >\n                                {`${item.subordinate}`.slice(2)}\n                              </div>\n                              <div\n                                className=\"month\"\n                              >{item.label}</div>\n                              <div\n                                className=\"title\"\n                                title={item.title}\n                              >\n                                {item.title}\n                              </div>\n                            </Link> :\n                            <div\n                              key={key}\n                              to={item.path}\n                              className={`notes nts-${item.subordinate} disabled`}\n                              style={{\n                                width: boderWidth,\n                                height: boderHeight,\n                                margin: `${notesMargin}`\n                              }}\n                            >\n                              <div\n                                className=\"year\"\n                              >\n                                {`${item.subordinate}`.slice(2)}\n                              </div>\n                              <div\n                                className=\"month\"\n                              >{item.label}</div>\n                              <div\n                                className=\"title\"\n                                title={item.title}\n                              >\n                                {item.title}\n                              </div>\n                            </div>\n                        )\n                      })\n                    }\n                  </div>\n                )\n              })\n            }\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default DailyNotes\n"],"sourceRoot":""}